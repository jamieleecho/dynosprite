//
//  DSScene.m
//  Space Bandits
//
//  Created by Jamie Cho on 5/7/20.
//  Copyright Â© 2020 Jamie Cho. All rights reserved.
//

#import "DSScene.h"

@implementation DSScene

- (id)init {
    /*
           LSB              $FF02                    MSB
         | PB0   PB1   PB2   PB3   PB4   PB5   PB6   PB7 <- column
     ----|----------------------------------------------
     PA0 |   @     A     B     C     D     E     F     G    LSB
     PA1 |   H     I     J     K     L     M     N     O     $
     PA2 |   P     Q     R     S     T     U     V     W     F
     PA3 |   X     Y     Z    Up  Down  Left Right Space     F
     PA4 |   0     1     2     3     4     5     6     7     0
     PA5 |   8     9     :     ;     ,     -     .     /     0
     PA6 | ENT   CLR   BRK   N/C   N/C   N/C   N/C  SHFT
     PA7 - Comparator input                                 MSB
      ^
      |
     row
     */
    if (self = [super init]) {
        memset(_debouncedKeys, 0xff, sizeof(_debouncedKeys));
        _pressedKeys = [[NSMutableSet alloc] init];
        _keyCodeToMatrix = @{
            @'@':    @[@0x01, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'h':    @[@0x02, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'p':    @[@0x04, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'x':    @[@0x08, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'0':    @[@0x10, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'8':    @[@0x20, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'\n':   @[@0x40, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],

            @'a':    @[@0x00, @0x01, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'i':    @[@0x00, @0x02, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'q':    @[@0x00, @0x04, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'y':    @[@0x00, @0x08, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'1':    @[@0x00, @0x10, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'9':    @[@0x00, @0x20, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'\t':   @[@0x00, @0x40, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00],

            @'b':    @[@0x00, @0x00, @0x01, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'j':    @[@0x00, @0x00, @0x02, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'r':    @[@0x00, @0x00, @0x04, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'z':    @[@0x00, @0x00, @0x08, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'2':    @[@0x00, @0x00, @0x10, @0x00, @0x00, @0x00, @0x00, @0x00],
            @'\'':   @[@0x00, @0x00, @0x20, @0x00, @0x00, @0x00, @0x00, @0x00],
            @0x1b:   @[@0x00, @0x00, @0x40, @0x00, @0x00, @0x00, @0x00, @0x00],

            @'c':    @[@0x00, @0x00, @0x00, @0x01, @0x00, @0x00, @0x00, @0x00],
            @'k':    @[@0x00, @0x00, @0x00, @0x02, @0x00, @0x00, @0x00, @0x00],
            @'s':    @[@0x00, @0x00, @0x00, @0x04, @0x00, @0x00, @0x00, @0x00],
            @0xF700: @[@0x00, @0x00, @0x00, @0x08, @0x00, @0x00, @0x00, @0x00],
            @'3':    @[@0x00, @0x00, @0x00, @0x10, @0x00, @0x00, @0x00, @0x00],
            @';':    @[@0x00, @0x00, @0x00, @0x20, @0x00, @0x00, @0x00, @0x00],
            @0xffff: @[@0x00, @0x00, @0x00, @0x40, @0x00, @0x00, @0x00, @0x00],

            @'d':    @[@0x00, @0x00, @0x00, @0x00, @0x01, @0x00, @0x00, @0x00],
            @'l':    @[@0x00, @0x00, @0x00, @0x00, @0x02, @0x00, @0x00, @0x00],
            @'t':    @[@0x00, @0x00, @0x00, @0x00, @0x04, @0x00, @0x00, @0x00],
            @0xF701: @[@0x00, @0x00, @0x00, @0x00, @0x08, @0x00, @0x00, @0x00],
            @'4':    @[@0x00, @0x00, @0x00, @0x00, @0x10, @0x00, @0x00, @0x00],
            @',':    @[@0x00, @0x00, @0x00, @0x00, @0x20, @0x00, @0x00, @0x00],
            @0xfffe: @[@0x00, @0x00, @0x00, @0x00, @0x40, @0x00, @0x00, @0x00],

            @'e':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x01, @0x00, @0x00],
            @'m':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x02, @0x00, @0x00],
            @'u':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x04, @0x00, @0x00],
            @0xF702: @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x08, @0x00, @0x00],
            @'5':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x10, @0x00, @0x00],
            @'-':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x20, @0x00, @0x00],
            @0xf704: @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x40, @0x00, @0x00],

            @'f':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x01, @0x00],
            @'n':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x02, @0x00],
            @'v':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x04, @0x00],
            @0xF703: @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x08, @0x00],
            @'6':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x10, @0x00],
            @'.':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x20, @0x00],
            @0xf705: @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x40, @0x00],

            @'g':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x01],
            @'o':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x02],
            @'w':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x04],
            @' ':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x08],
            @'7':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x10],
            @'/':    @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x20],
            @0xffd:  @[@0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x00, @0x40],
        };
    }
    return self;
}

- (void)updateDebouncedKeys {
    memset(_debouncedKeys, 0xff, sizeof(_debouncedKeys));
    for(NSNumber *key in _pressedKeys) {
        NSArray<NSNumber *> *matrix = _keyCodeToMatrix[key];
        if (matrix == nil) {
            continue;
        }
        for(size_t ii=0; ii<sizeof(_debouncedKeys); ii++) {
            _debouncedKeys[ii] &= ~(matrix[ii].intValue);
        }
    }
}

- (uint8_t *)debouncedKeys {
    return _debouncedKeys;
}

- (void)keyDown:(NSEvent *)theEvent {
    [self.joystickController handleKeyDown:theEvent];

    NSString *chars = [theEvent charactersIgnoringModifiers];
    for(NSUInteger ii=0; ii != chars.length; ii++) {
        const unichar keyChar = [chars characterAtIndex:ii];
        [_pressedKeys addObject:[NSNumber numberWithInt:keyChar]];
    }
    [self updateDebouncedKeys];
}

- (void)keyUp:(NSEvent *)theEvent {
    [self.joystickController handleKeyUp:theEvent];
    NSString *chars = [theEvent charactersIgnoringModifiers];
    for(NSUInteger ii=0; ii != chars.length; ii++) {
        const unichar keyChar = [chars characterAtIndex:ii];
        [_pressedKeys removeObject:[NSNumber numberWithInt:keyChar]];
    }
    [self updateDebouncedKeys];
}

- (void)didMoveToView:(SKView *)view {
    id sampleJoystick = ^{
        [self.joystickController sample];
        [self poll];
    };
    if (!_pollAction) {
        _pollAction = [SKAction repeatActionForever:[SKAction sequence:@[[SKAction runBlock:sampleJoystick], [SKAction waitForDuration:1.0f / view.preferredFramesPerSecond]]]];
        [self runAction:_pollAction withKey:@"pollAction"];
    }
}

- (void)willMoveFromView:(SKView *)view {
    [self removeActionForKey:@"pollAction"];
    _pollAction = nil;
    [_pressedKeys removeAllObjects];
    [self updateDebouncedKeys];
}

- (void)poll {
}

@end
